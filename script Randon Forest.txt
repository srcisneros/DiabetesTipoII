# -*- coding: utf-8 -*-
"""ranForest3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P0DUZzTUOOwyPtL9QajBEkicwckDFVFA

DETECCION DE DIABTES

IMPORTA Y CARGA DE LIBRERIAS
"""

import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, roc_auc_score,accuracy_score, precision_score, recall_score, f1_score, roc_curve, auc, confusion_matrix
import matplotlib.pyplot as plt
from random import sample
from sklearn import  tree
# import seaborn as sns

class LogicalEngine:
    
    @staticmethod
    def get_resultado( df_diabetes ):
        """Lee datos"""
        # df_diabetes = pd.read_csv('diabetesTotall.csv')

        """Reemplaza 'M' con 1 y 'F' con 0 en la columna 'Genero'"""
        df_diabetes['Genero'] = df_diabetes['Genero'].map({'M': 1, 'F': 0})

        """Imprime numero de registros y numero de columnas"""

        df_diabetes.shape

        """Verifica si hay valores nulo"""

        df_diabetes.isnull().values.any()

        """visualizo la data"""
        df_diabetes

        """utilizo muestreo con remplazo"""

        print(df_diabetes.sample(frac=2/3, replace=True))

        """seleccion de caracteristicas para divisiones"""

        print(df_diabetes.columns[:-1], '\n')
        print(sample(set(df_diabetes.columns[:-1]), 4))

        """creacion de bosques aleatorios"""

        bosque = RandomForestClassifier(n_estimators=2,
                                        criterion="gini",
                                        max_features="sqrt",
                                        bootstrap=True,
                                        max_samples=2/3,
                                        oob_score=True)

        bosque.fit(df_diabetes[df_diabetes.columns[:-1]].values, df_diabetes["Diabetes"].values)

        #print(bosque.predict([[1, 48, 142, 20, 0.9, 6.2, 100, 400, 100, 115, 30, 30, 0.18 ]]))  #tiene diabetes
        print(bosque.predict([[1, 48, 95, 9, 0.2, 3.2, 95, 100, 90, 90, 10, 24, 0.1 ]]))        #No tiene diabetes
        print(bosque.score(df_diabetes[df_diabetes.columns[:-1]].values, df_diabetes["Diabetes"].values))
        print(bosque.oob_score_)

        """imprime arboles"""

        for arbol in bosque.estimators_:
          tree.plot_tree(arbol, feature_names=df_diabetes.columns[:-1])
          plt.show()
        
        return df_diabetes, bosque
